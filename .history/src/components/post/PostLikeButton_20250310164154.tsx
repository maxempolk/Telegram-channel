'use client';
// LikeButton.jsx (–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º localStorage)
import { useState, useEffect, FC } from 'react';

interface LikeButtonProps {
  postId: number;
  initialLikes: number;
}

const LikeButton: FC<LikeButtonProps> = ({ postId, initialLikes = 0 }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage
  const [likes, setLikes] = useState(initialLikes);
  const [isLiked, setIsLiked] = useState(false);

  // –ö–ª—é—á–∏ –¥–ª—è localStorage
  const likeCountKey = `post_${postId}_likes`;
  const likeStatusKey = `post_${postId}_isLiked`;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞
    const savedLikeStatus = localStorage.getItem(likeStatusKey);
    if (savedLikeStatus !== null) {
      setIsLiked(savedLikeStatus === 'true');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const savedLikes = localStorage.getItem(likeCountKey);
    if (savedLikes !== null) {
      setLikes(parseInt(savedLikes, 10));
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º initialLikes –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(likeCountKey, initialLikes.toString());
    }
  }, [postId, initialLikes, likeCountKey, likeStatusKey]);

  const handleLikeClick = async () => {
    try {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const newIsLiked = !isLiked;
      const newLikes = newIsLiked ? likes + 1 : likes - 1;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      setIsLiked(newIsLiked);
      setLikes(newLikes);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      localStorage.setItem(likeStatusKey, newIsLiked.toString());
      localStorage.setItem(likeCountKey, newLikes.toString());

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`/api/posts/${postId}/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isLiked: newIsLiked }),
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞:', error);
      // –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —É–¥–∞–ª—Å—è, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
    }
  };

  return (
    <button className={`like-button ${isLiked ? 'liked' : ''}`} onClick={handleLikeClick}>
      {isLiked ? '‚ù§Ô∏è' : 'ü§ç'} {likes}
    </button>
  );
};

export default LikeButton;
