import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

const POSTS_COUNT = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const MIN_IMAGES_PER_POST = 1;
const MAX_IMAGES_PER_POST = 5;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ public
const IMAGE_PATH = path.join(process.cwd(), 'public', 'image.jpg');

// –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤
const TAGS = [
  '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 
  'javascript', 'python', 'react', 'nextjs', 
  'fastapi', 'prisma', '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'frontend', 
  'backend', '–¥–∏–∑–∞–π–Ω', 'ui/ux', '–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–≥–æ–≤
function generateRandomTags(min = 1, max = 4) {
  const tagsCount = faker.number.int({ min, max });
  const shuffledTags = TAGS.sort(() => 0.5 - Math.random());
  return shuffledTags.slice(0, tagsCount).join(', ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
async function createImageFiles(postId: number, count: number) {
  const files = [];
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const stats = fs.statSync(IMAGE_PATH);
  const fileSize = stats.size;
  const mimeType = 'image/jpeg'; // MIME-—Ç–∏–ø –¥–ª—è —Ñ–∞–π–ª–∞ .jpg
  
  for (let i = 0; i < count; i++) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è
    const filename = `image_${i + 1}.jpg`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const relativePath = `/images/posts/${postId}/${filename}`;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const file = await prisma.file.create({
      data: {
        filename,
        path: relativePath,
        mimeType,
        size: fileSize,
        postId
      }
    });
    
    files.push(file);
  }
  
  return files;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function seed() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!fs.existsSync(IMAGE_PATH)) {
      console.error(`‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${IMAGE_PATH}`);
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    await prisma.file.deleteMany({});
    await prisma.post.deleteMany({});
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
    for (let i = 0; i < POSTS_COUNT; i++) {
      const title = faker.lorem.sentence({ min: 3, max: 8 });
      const content = faker.lorem.paragraphs({ min: 2, max: 10 }, '\n\n');
      const tags = generateRandomTags();
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
      const post = await prisma.post.create({
        data: {
          title,
          content,
          tags
        }
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
      const imagesCount = faker.number.int({ min: MIN_IMAGES_PER_POST, max: MAX_IMAGES_PER_POST });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞–π–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
      await createImageFiles(post.id, imagesCount);
      
      if (i % 10 === 0) {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${i} –ø–æ—Å—Ç–æ–≤ –∏–∑ ${POSTS_COUNT}`);
      }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤—Å–µ–≥–æ ${POSTS_COUNT} –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
    
    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const postsCount = await prisma.post.count();
    const filesCount = await prisma.file.count();
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –ü–æ—Å—Ç–æ–≤: ${postsCount}`);
    console.log(`- –§–∞–π–ª–æ–≤: ${filesCount}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–æ—Å—Ç: ${(filesCount / postsCount).toFixed(2)}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
    console.log('üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
seed()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });